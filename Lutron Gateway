/**
 *  Lutron Gateway
 *
 *  Copyright 2015 Bruce Ravenel
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Lutron Gateway",
    namespace: "bravenel",
    author: "Bruce Ravenel",
    description: "Create virtual devices for each Lutron device and control Lutron with them",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")

preferences {
	page(name: "selectLutron")
}

def getCmd(myCmd, n) {
	def result = input myCmd, "text", title: "Lutron Command #$n", required: true
}

def getName(myName, n) {
	def result = input myName, "text", title: "Device Name #$n", required: true
}

def selectLutron() {
	dynamicPage(name: "selectLutron", title: "Lutron Gateway and Devices", uninstall: true, install: true) {
		section("") {
			input "Lutron", "capability.musicPlayer", title: "Lutron gateway", required: true, multiple: false
			input "Remove", "capability.momentary", title: "Remove button", required: true, multiple: false
			input "howMany", "number", title: "How many Lutron devices?", required: true, submitOnChange: true
		}
		section("Select Lutron Devices") {
			for (int i = 0; i < howMany; i++) {
				def thisCmd = "dCmd$i"
				def thisName = "dName$i"
				getCmd(thisCmd, i + 1)
				getName(thisName, i + 1)
                		paragraph(" ")
			}
		}
	}
}

def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}

def initialize() {
	state.myDevices = [:]
    state.reverse = [:]
	for (int i = 0 ; i < howMany; i++) {
        def thisCmd = settings.find {it.key == "dCmd$i"}
        def thisName = settings.find {it.key == "dName$i"}
    	def deviceId = "Lutron" + "$i-" + app.id
        def myDevice = getChildDevice(deviceId)
        if(!myDevice) def childDevice = addChildDevice("smartthings", thisCmd.value[1] in ['d', 'D'] ? "Lutron RA Dimmer" : "Lutron RA Switch", deviceId, null, [label: thisName.value])
        myDevice = getChildDevice(deviceId)
        myDevice.name = thisCmd.value
        if(myDevice.name[0] in ['s', 'S']) {        //  SSI or SDL, build map based on Lutron zone #
        	def iloc = myDevice.name.indexOf(',') + 1
			def ndx = myDevice.name.substring(iloc).toInteger()
			state.myDevices << ["$ndx":deviceId]
        } 
        state.reverse << ["$deviceId":myDevice.name]
    }
    subscribe(Lutron, "msgRcvd", LutronHandler)
    subscribe(Remove, "switch.on", removeHandler)
    state.zmp = ",XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
}

def on(childDevice) {
	def devName = childDevice.device.deviceNetworkId
    def devId = state.reverse["$devName"]
    def device = getChildDevice(devName)
	if(devId[1] == "d") Lutron.sendMsg("$devId," + (device.currentLevel == 0 ? "100" : "$device.currentLevel"))
    else Lutron.sendMsg("$devId,on")
}

def off(childDevice) {
	def devName = childDevice.device.deviceNetworkId
    def devId = state.reverse["$devName"]
	if(devId[1] == "d") Lutron.sendMsg("$devId,0")
    else Lutron.sendMsg("$devId,off")
}

def setLevel(childDevice, level) {
	def devName = childDevice.device.deviceNetworkId
    def devId = state.reverse["$devName"]
	Lutron.sendMsg("$devId,$level")
}

def refresh(childDevice) {
	return
}

def LutronHandler(evt) {
	if (evt.value.startsWith("LZC") && !evt.value.endsWith("CHG")) {  // process on/off of zone
		def ndx = evt.value.substring(evt.value[4] == "0" ? 5 : 4, 6)
		def device = getChildDevice(state.myDevices["$ndx"])
		device.sendEvent(name: "switch", value: evt.value.endsWith("ON ") ? "on" : "off")
	} else if (evt.value.startsWith("ZMP")) {			  // process zmp report to tie BP to zones
		def zmp = evt.value.substring(3)
		for (int i = 1; i <= 32; i++) if(state.zmp[i] != zmp[i]) { // state changed
			def device = getChildDevice(state.myDevices["$i"])
			device.sendEvent(name: "switch", value: zmp[i] == "1" ? "on" : "off")
		}
		state.zmp = zmp
	}
}

def removeHandler(evt) {
	unsubscribe()
}

def uninstalled() {
	removeChildDevices(getChildDevices())
}

private removeChildDevices(delete) {
	delete.each {deleteChildDevice(it.deviceNetworkId)}
}
